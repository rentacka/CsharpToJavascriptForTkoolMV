using MVScriptTsApp;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Windows.Forms;
using TkoolJsonData;

namespace jsCallEditor
{
	internal class TkoolJson
	{
		public class CsData
		{
			public string name;

			public string path;

			public string data;
		}

		private static string DataDir
		{
			get
			{
				return Path.Combine(MainWindow.prjDir, "data\\");
			}
		}

        public PluguinJs[] DeSerializePluginsJs()
        {
            string str = "plugins";
            var dir = Path.Combine(MainWindow.prjDir, "js\\");

            // plugins.jsの冒頭と末端の];のコロンを削除してJson形式にする。
            StreamReader sr = new StreamReader(
                Path.Combine(dir, str + ".js"),
                Encoding.UTF8
                );
            List<string> lines = new List<string>();
            while (sr.Peek() > -1)
            {
                var target = sr.ReadLine();
                if (target != "// Generated by RPG Maker." && target != "// Do not edit this file directly." && target != "var $plugins =" && target != "];")
                    lines.Add(target);

                if (target == "];")
                    lines.Add("]");
            }
            sr.Close();

            // []文字削除
            lines.RemoveAt(0);
            lines.RemoveAt(lines.Count - 1);
            List<string> parameters = new List<string>();
            // パラメータを力技で取得
            foreach (var line in lines)
            {
                var target = @"""" + "parameters" + @"""" + ":" + "{";
                var paramIdx = line.IndexOf(target);

                var paramStr = line.Substring(paramIdx, line.Length - paramIdx);

                paramStr = paramStr.TrimEnd("}},".ToCharArray());
                paramStr = paramStr.Remove(0, target.Length);

                parameters.Add(paramStr);

                /*
                var yenyen = @"\";
                // Unicode特有の文字列の削除
                var line2 = line.Replace(yenyen, "sm1715919");
                line2 = line2.Replace("\"", "sm1097445");


                var target = "sm1097445" + "parameters" + "sm1097445" + ":" + "{";
                var paramIdx = line2.IndexOf(target);

                var paramStr = line2.Substring(paramIdx, line2.Length - paramIdx);

                paramStr = paramStr.TrimEnd("}},".ToCharArray());
                paramStr = paramStr.Remove(0, target.Length);

                parameters.Add(paramStr);
                */
            }

            lines.Insert(0,"[");
            lines.Add("]");
            string text = null;
            foreach (var line in lines)
            {
                text += line + "\r\n";
            }

            List<PluguinJs> plugins = new List<PluguinJs>();
            var js = Codeplex.Data.DynamicJson.Parse(text);
            int pluginIdx = 0;
            foreach (var mem in js)
            {
                var plugin = new PluguinJs();
                plugin.Name = mem.name;
                plugin.Description = mem.description;
                plugin.Status = mem.status;
                plugin.Parameters = parameters[pluginIdx];

                plugins.Add(plugin);

                pluginIdx++;
            }

            return plugins.ToArray();
        }

        public Animations[] DeSerializeAnimations()
		{
			string str = "Animations";
			return this.DeserializeFromFile<Animations[]>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public Tilesets[] DeSerializeTilesets()
		{
			string str = "Tilesets";
			return this.DeserializeFromFile<Tilesets[]>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public States[] DeSerializeStates()
		{
			string str = "States";
			return this.DeserializeFromFile<States[]>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public CommonEvents[] DeSerializeCommonEvents()
		{
			string str = "CommonEvents";
			return this.DeserializeFromFile<CommonEvents[]>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public Items[] DeSerializeItems()
		{
			string str = "Items";
			return this.DeserializeFromFile<Items[]>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public Actors[] DeSerializeActors()
		{
			string str = "Actors";
			return this.DeserializeFromFile<Actors[]>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public Armors[] DeSerializeArmors()
		{
			string str = "Armors";
			return this.DeserializeFromFile<Armors[]>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public Classes[] DeSerializeClasses()
		{
			string str = "Classes";
			return this.DeserializeFromFile<Classes[]>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public Enemies[] DeSerializeEnemies()
		{
			string str = "Enemies";
			return this.DeserializeFromFile<Enemies[]>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public Troops[] DeSerializeTroops()
		{
			string str = "Troops";
			return this.DeserializeFromFile<Troops[]>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public Weapons[] DeSerializeWeapons()
		{
			string str = "Weapons";
			return this.DeserializeFromFile<Weapons[]>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public TkoolSystem DeSerializeSystem()
		{
			string str = "System";
			return this.DeserializeFromFile<TkoolSystem>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public Skills[] DeSerializeSkills()
		{
			string str = "Skills";
			return this.DeserializeFromFile<Skills[]>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public MapInfoItem[] DeSerializeMapInfos()
		{
			string str = "MapInfos";
			return this.DeserializeFromFile<MapInfoItem[]>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public Map DeSerializeMapFromFile(int mapID)
		{
			string str = "Map" + mapID.ToString("000");
			return this.DeserializeFromFile<Map>(Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public T DeserializeFromFile<T>(string path)
		{
			return JsonConvert.DeserializeObject<T>(TkoolJson.ReadText(path));
		}

		public static void DeSerializeMapFile(int mapID)
		{
			TkoolJson.DeSerializeMapFile(mapID, false);
		}

		public static TkoolJson.CsData DeSerializeMapFile(int mapID, bool isReadCsFile)
		{
			Directory.CreateDirectory(Application.StartupPath + "\\data");
			string text = "Map" + mapID.ToString("000");
			TkoolJson.DeSerializeFile(Path.Combine(TkoolJson.DataDir, text + ".json"), Application.StartupPath + "\\data", text, text);
			if (isReadCsFile)
			{
				string path = Application.StartupPath + "\\data\\" + text + ".cs";
				string data = TkoolJson.ReadText(path);
				return new TkoolJson.CsData
				{
					name = text,
					path = path,
					data = data
				};
			}
			return null;
		}

		public static void DeSerializeMapInfosFile()
		{
			string text = "MapInfos";
			TkoolJson.DeSerializeFile(Path.Combine(TkoolJson.DataDir, text + ".json"), Application.StartupPath + "\\data", text, text);
		}

		public static void DeSerializeFile(string jsonPath, string foldaPath, string nameSpace, string className)
		{
			TkoolJson.DeSerializeFile(jsonPath, foldaPath, nameSpace, className);
		}

        public void SerializePluginsJs(PluguinJs[] mapObj)
        {
            string str = "plugins";
            var dir = Path.Combine(MainWindow.prjDir, "js\\");

            StreamWriter sr = new StreamWriter(Path.Combine(dir, str + ".js"));

            sr.WriteLine("// Generated by RPG Maker.");
            sr.WriteLine("// Do not edit this file directly.");
            sr.WriteLine("var $plugins =");
            sr.WriteLine("[");

            var paramJson = @"""" + "parameters" + @"""" + ":";

            int iCount = 0;
            foreach (var item in mapObj)
            {
                iCount++;

                var strParm = (string)item.Parameters;

                item.Parameters = strParm;
                if (item.Parameters != null)
                {
                    if (strParm.Length > 0)
                    {
                        var yenyen = @"\";
                        // Unicode特有の文字列の削除
                        strParm = strParm.Replace(yenyen, "sm1715919");
                        strParm = strParm.Replace("\"", "sm1097445");

                        if (strParm.IndexOf("sm1097445") == 0)
                            strParm = strParm.Remove(0, "sm1097445".Length);

                        item.Parameters = strParm;

                        string itemTxt = JsonConvert.SerializeObject(item);

                        // パラメータに｛｝を追加 ＋ smIDから"に変換
                        List<string> parameters = new List<string>();
                        itemTxt = itemTxt.Replace(paramJson, paramJson + "{");
                        itemTxt = itemTxt.Replace("sm1097445" + @"""", "sm1097445");
                        itemTxt = itemTxt.Replace("sm1097445", @"""");
                        itemTxt = itemTxt.Replace("sm1715919", yenyen);

                        itemTxt = itemTxt + "}";

                        sr.Write(itemTxt);
                    }
                    else
                    {
                        string itemTxt = JsonConvert.SerializeObject(item);
                        itemTxt = itemTxt.Replace(paramJson + "{"+ @"""" + @""""+ "}", paramJson + "{}");
                        itemTxt = itemTxt.Replace(paramJson + @"""" + @"""", paramJson + "{}");
                        sr.Write(itemTxt);
                    }
                }
                else
                {
                    string itemTxt = JsonConvert.SerializeObject(item);
                    itemTxt = itemTxt.Replace(paramJson + "null", paramJson + "{}");
                    sr.Write(itemTxt);
                }

                if (iCount < mapObj.Length)
                    sr.WriteLine(",");
            }

            sr.WriteLine("");
            sr.WriteLine("];");
            sr.Close();
        }

        public void SerializeTkoolData(Animations[] mapObj)
		{
			string str = "Animations";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeTkoolData(Actors[] mapObj)
		{
			string str = "Actors";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeTkoolData(Armors[] mapObj)
		{
			string str = "Armors";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeTkoolData(Classes[] mapObj)
		{
			string str = "Classes";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeTkoolData(CommonEvents[] mapObj)
		{
			string str = "CommonEvents";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeTkoolData(Enemies[] mapObj)
		{
			string str = "Enemies";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeTkoolData(Items[] mapObj)
		{
			string str = "Items";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeTkoolData(Skills[] mapObj)
		{
			string str = "Skills";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeTkoolData(States[] mapObj)
		{
			string str = "States";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeTkoolData(Tilesets[] mapObj)
		{
			string str = "Tilesets";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeTkoolData(TkoolSystem mapObj)
		{
			string str = "TkoolSystem";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeTkoolData(Troops[] mapObj)
		{
			string str = "Troops";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeTkoolData(Weapons[] mapObj)
		{
			string str = "Weapons";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeTkoolData(MapInfoItem[] mapObj)
		{
			string str = "MapInfos";
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeMapFile(Map mapObj, int mapID)
		{
			string str = "Map" + mapID.ToString("000");
			this.SerializeFile(mapObj, Path.Combine(TkoolJson.DataDir, str + ".json"));
		}

		public void SerializeFile(object obj, string fileName)
		{
			string text = JsonConvert.SerializeObject(obj);
			TkoolJson.TextWrite(fileName, text);
		}

		public string Serialize(object obj)
		{
			return JsonConvert.SerializeObject(obj);
		}

		private static void TextWrite(string path, string text)
		{
			StreamWriter expr_0C = new StreamWriter(path, false, Encoding.UTF8);
			expr_0C.Write(text);
			expr_0C.Close();
		}

		private static string ReadText(string path)
		{
			StreamReader expr_0B = new StreamReader(path, Encoding.UTF8);
			string result = expr_0B.ReadToEnd();
			expr_0B.Close();
			return result;
		}

		private static string ConvertEncoding(string src, Encoding destEnc)
		{
			Encoding expr_05 = Encoding.ASCII;
			byte[] bytes = expr_05.GetBytes(src);
			byte[] bytes2 = Encoding.Convert(expr_05, destEnc, bytes);
			return destEnc.GetString(bytes2);
		}

		private static void DynamicCsharp()
		{
		}
	}
}
