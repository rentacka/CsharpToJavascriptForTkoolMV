/*!
* Type definitions for axcorlib, Version=2.1.232.0, Culture=neutral, PublicKeyToken=null
*
* Generated by DuoCode Compiler 2.2.1617.0 [Professional]
*/

/// <reference path="./mscorlib.d.ts" />

declare module System {
    // System.LogLevel
    export enum LogLevel {
        Info = 0,
        Error = 1,
        Debug = 2
    }

    // System.BlobData
    export interface BlobData extends Blob {
    }
    export interface BlobDataTypeFunc extends TypeFunction {
        (): BlobDataTypeFunc;
        prototype: BlobData;
        new (blobParts: Array<any>, options?: DuoCode.Dom.BlobPropertyBag): BlobData;
        ctor: { new (blobParts: Array<any>, options?: DuoCode.Dom.BlobPropertyBag): BlobData; };
    }
    const BlobData: BlobDataTypeFunc;

    // System.ApplicationAttribute
    export interface ApplicationAttribute extends Attribute {
    }
    export interface ApplicationAttributeTypeFunc extends TypeFunction {
        (): ApplicationAttributeTypeFunc;
        prototype: ApplicationAttribute;
        new (): ApplicationAttribute;
        ctor: { new (): ApplicationAttribute; };
    }
    const ApplicationAttribute: ApplicationAttributeTypeFunc;

    // System.ReadyAttribute
    export interface ReadyAttribute extends Attribute {
    }
    export interface ReadyAttributeTypeFunc extends TypeFunction {
        (): ReadyAttributeTypeFunc;
        prototype: ReadyAttribute;
        new (): ReadyAttribute;
        ctor: { new (): ReadyAttribute; };
    }
    const ReadyAttribute: ReadyAttributeTypeFunc;

    // System.IService
    export interface IService {
    }
    const IService: TypeFunction;

    // System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
    export interface Func$10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9): TResult; }

    // System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
    export interface Func$11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10): TResult; }

    // System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
    export interface Func$12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11): TResult; }

    // System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
    export interface Func$13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12): TResult; }

    // System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
    export interface Func$14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13): TResult; }

    // System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
    export interface Func$15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14): TResult; }

    // System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
    export interface Func$16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, arg15: T15): TResult; }

    // System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>
    export interface Func$17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, arg15: T15, arg16: T16): TResult; }

    // System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>
    export interface Action$9<T1, T2, T3, T4, T5, T6, T7, T8, T9> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9): void; }

    // System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
    export interface Action$10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10): void; }

    // System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
    export interface Action$11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11): void; }

    // System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
    export interface Action$12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12): void; }

    // System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
    export interface Action$13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13): void; }

    // System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
    export interface Action$14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14): void; }

    // System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
    export interface Action$15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, arg15: T15): void; }

    // System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
    export interface Action$16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> extends MulticastDelegate { (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8, arg9: T9, arg10: T10, arg11: T11, arg12: T12, arg13: T13, arg14: T14, arg15: T15, arg16: T16): void; }

    // System.DataStorage
    export interface DataStorage extends Object {
        get_DatabaseName(): string;
        get_DatabaseVersion(): ulong;
        get_DefaultStoreOptions(): any;
        set_DefaultStoreOptions(value: any): void;
        OpenDatabase(success?: Action, failure?: Action$1<Exception>): void;
        OnCreateObjectStores(db: IDBDatabase, scheme: IDBVersionChangeEvent): void;
        GetObjectStore(name?: string, mode?: string, failure?: Action$1<Exception>): IDBObjectStore;
        GetTransaction(name: string, mode?: string): IDBTransaction;
        GetTransaction$1(names: string[], mode?: string): IDBTransaction;
        GetDatabase(): IDBDatabase;
    }
    export interface DataStorageTypeFunc extends TypeFunction {
        (): DataStorageTypeFunc;
        prototype: DataStorage;
        DefaultStoreName: string;
        new (name: string, version?: ulong): DataStorage;
        ctor: { new (name: string, version?: ulong): DataStorage; };
    }
    const DataStorage: DataStorageTypeFunc;

    // System.Null
    export interface NullTypeFunc extends TypeFunction {
        (): NullTypeFunc;
        Value: any;
    }
    const Null: NullTypeFunc;

    // System.Nothing
    export interface Nothing extends ValueType {
    }
    export interface NothingTypeFunc extends TypeFunction {
        (): NothingTypeFunc;
        prototype: Nothing;
        new (): Nothing;
        ctor: { new (): Nothing; };
    }
    const Nothing: NothingTypeFunc;

    // System.Errors
    export interface ErrorsTypeFunc extends TypeFunction {
        (): ErrorsTypeFunc;
        DefaultException: Action$1<Exception>;
    }
    const Errors: ErrorsTypeFunc;

    // System.Ajax
    export interface AjaxTypeFunc extends TypeFunction {
        (): AjaxTypeFunc;
        Get(url: string, success?: Action$1<AjaxResponse>, failure?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): void;
        GetAsync(url: string, exception?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
        Post(url: string, data: any, type: string, success?: Action$1<AjaxResponse>, failure?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): void;
        PostAsync(url: string, data: any, type: string, exception?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
        PostJson(url: string, data: any, success?: Action$1<AjaxResponse>, failure?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): void;
        PostJsonAsync(url: string, data: any, exception?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
        Put(url: string, data: any, type: string, success?: Action$1<AjaxResponse>, failure?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): void;
        PutAsync(url: string, data: any, type: string, exception?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
        PutJson(url: string, data: any, success?: Action$1<AjaxResponse>, failure?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): void;
        PutJsonAsync(url: string, data: any, exception?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
        Delete(url: string, success?: Action$1<AjaxResponse>, failure?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): void;
        DeleteAsync(url: string, exception?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
        ParseJson<T>(T: TypeArg<T>, json: string): T;
        JsonString(obj: any): string;
    }
    const Ajax: AjaxTypeFunc;

    // System.AjaxResponse
    export interface AjaxResponse extends Object {
        get_Type(): string;
        get_Code(): int;
        get_Status(): string;
        get_Content(): string;
        get_Encoding(): string;
        get_Headers(): Collections.Generic.Dictionary$2<string, string>;
    }
    export interface AjaxResponseTypeFunc extends TypeFunction {
        (): AjaxResponseTypeFunc;
        prototype: AjaxResponse;
        new (type: string, code: int, status: string, content: string, encoding: string, headers: Collections.Generic.Dictionary$2<string, string>): AjaxResponse;
        ctor: { new (type: string, code: int, status: string, content: string, encoding: string, headers: Collections.Generic.Dictionary$2<string, string>): AjaxResponse; };
    }
    const AjaxResponse: AjaxResponseTypeFunc;

    // System.IAjaxService
    export interface IAjaxService {
        System$IAjaxService$Get(url: string, success: Action$1<AjaxResponse>, failure: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): void;
        System$IAjaxService$GetAsync(url: string, exception: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
        System$IAjaxService$Post(url: string, data: any, type: string, success: Action$1<AjaxResponse>, failure: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): void;
        System$IAjaxService$PostAsync(url: string, data: any, type: string, exception: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
        System$IAjaxService$PostJson(url: string, data: any, success: Action$1<AjaxResponse>, failure: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): void;
        System$IAjaxService$PostJsonAsync(url: string, data: any, exception: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
        System$IAjaxService$Put(url: string, data: any, type: string, success: Action$1<AjaxResponse>, failure: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): void;
        System$IAjaxService$PutAsync(url: string, data: any, type: string, exception: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
        System$IAjaxService$PutJson(url: string, data: any, success: Action$1<AjaxResponse>, failure: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): void;
        System$IAjaxService$PutJsonAsync(url: string, data: any, exception: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
        System$IAjaxService$Delete(url: string, success: Action$1<AjaxResponse>, failure: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): void;
        System$IAjaxService$DeleteAsync(url: string, exception: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
    }
    const IAjaxService: TypeFunction;

    // System.Trace
    export interface TraceTypeFunc extends TypeFunction {
        (): TraceTypeFunc;
        get_EnableDebug(): boolean;
        set_EnableDebug(value: boolean): void;
        Debug(message: string): void;
        Debug$1(format: string, arg0: any): void;
        Debug$3(format: string, arg0: any, arg1: any): void;
        Debug$4(format: string, arg0: any, arg1: any, arg2: any): void;
        Debug$5(format: string, arg0: any, arg1: any, arg2: any, arg3: any): void;
        Debug$2(format: string, args: any[]): void;
        Info(message: string): void;
        Info$1(format: string, arg0: any): void;
        Info$3(format: string, arg0: any, arg1: any): void;
        Info$4(format: string, arg0: any, arg1: any, arg2: any): void;
        Info$5(format: string, arg0: any, arg1: any, arg2: any, arg3: any): void;
        Info$2(format: string, args: any[]): void;
        Error(message: string): void;
        Error$1(format: string, arg0: any): void;
        Error$4(format: string, arg0: any, arg1: any): void;
        Error$5(format: string, arg0: any, arg1: any, arg2: any): void;
        Error$6(format: string, arg0: any, arg1: any, arg2: any, arg3: any): void;
        Error$2(format: string, args: any[]): void;
        Error$3(exception: Exception, stack?: boolean, flatten?: boolean): void;
        Flatten(exception: Exception): Exception[];
        get_OnLogMessage(): Action$2<LogLevel, string>;
        set_OnLogMessage(value: Action$2<LogLevel, string>): void;
    }
    const Trace: TraceTypeFunc;

    // System.IConsoleService
    export interface IConsoleService {
        System$IConsoleService$WriteLine(value: string): void;
    }
    const IConsoleService: TypeFunction;

    // System.MemberInfoExtensions
    export interface MemberInfoExtensionsTypeFunc extends TypeFunction {
        (): MemberInfoExtensionsTypeFunc;
        GetCustomAttribute<T>(T: TypeArg<T>, memberInfo: Reflection.MemberInfo, inherit?: boolean): T;
        GetCustomAttributes<T>(T: TypeArg<T>, memberInfo: Reflection.MemberInfo, inherit?: boolean): Collections.Generic.IEnumerable$1<T>;
    }
    const MemberInfoExtensions: MemberInfoExtensionsTypeFunc;

    // System.EventArgs<T>
    export interface EventArgs$1<T> extends EventArgs {
        get_Data(): T;
    }
    export interface EventArgs$1TypeFunc<T> extends TypeFunction {
        (): EventArgs$1TypeFunc<T>;
        prototype: EventArgs$1<T>;
        new (data: T): EventArgs$1<T>;
        ctor: { new (data: T): EventArgs$1<T>; };
    }
    export function EventArgs$1<T>(T: TypeArg<T>): EventArgs$1TypeFunc<T>;

    // System.EventArgs<T, U>
    export interface EventArgs$2<T, U> extends EventArgs$1<T> {
        get_Aux(): U;
    }
    export interface EventArgs$2TypeFunc<T, U> extends TypeFunction {
        (): EventArgs$2TypeFunc<T, U>;
        prototype: EventArgs$2<T, U>;
        new (data: T, aux: U): EventArgs$2<T, U>;
        ctor: { new (data: T, aux: U): EventArgs$2<T, U>; };
    }
    export function EventArgs$2<T, U>(T: TypeArg<T>, U: TypeArg<U>): EventArgs$2TypeFunc<T, U>;

    // System.PreferredConstructorAttribute
    export interface PreferredConstructorAttribute extends Attribute {
    }
    export interface PreferredConstructorAttributeTypeFunc extends TypeFunction {
        (): PreferredConstructorAttributeTypeFunc;
        prototype: PreferredConstructorAttribute;
        new (): PreferredConstructorAttribute;
        ctor: { new (): PreferredConstructorAttribute; };
    }
    const PreferredConstructorAttribute: PreferredConstructorAttributeTypeFunc;

    // System.App
    export interface AppTypeFunc extends TypeFunction {
        (): AppTypeFunc;
        Bootstrap(): void;
        get_FrameWindow(): HTMLElement;
        get_IsReady(): boolean;
        get_Ioc(): Gateway.Ioc.MicroIoc;
    }
    const App: AppTypeFunc;

    // System.Root
    export interface RootTypeFunc extends TypeFunction {
        (): RootTypeFunc;
        LAG: int;
        LAG_MIN: int;
        LAG_MAX: int;
        get_wnd(): any;
        new<T>(T: TypeArg<T>): T;
        log(value: any): void;
        create(tag: string): HTMLElement;
        create$1<T>(T: TypeArg<T>, tag: string): T;
        delay(duration: int, action: Action): int;
        repeat(interval: int, action: Action): int;
        kill(handle: int): void;
        wait(expression: Func$1<boolean>, success?: Action$1<AsyncWaiter>, failure?: Action$1<Exception>, interval?: int, timeout?: int): AsyncWaiter;
        require<T>(T: TypeArg<T>, path: string): T;
        hasClass(element: HTMLElement, classname: string): boolean;
        addClass(element: HTMLElement, classname: string): void;
        removeClass(element: HTMLElement, classname: string): void;
        toggleClass(element: HTMLElement, classname: string): void;
        getClasses(element: HTMLElement): string;
        setClasses(element: HTMLElement, classes: string): void;
        jquery(): Object;
        jquery$6(selector: string): Object;
        jquery$8(selector: string, context: Element): Object;
        jquery$9(selector: string, context: Object): Object;
        jquery$1(element: Element): Object;
        jquery$2(elements: Element[]): Object;
        jquery$5(obj: any): Object;
        jquery$3(obj: Object): Object;
        jquery$7(html: string, ownerDocument: Document): Object;
        jquery$10(html: string, attributes: any): Object;
        jquery$4(callback: Func$2<any, any>): Object;
        jquery$16<T>(T: TypeArg<T>, selector: string): T;
        jquery$18<T>(T: TypeArg<T>, selector: string, context: Element): T;
        jquery$19<T>(T: TypeArg<T>, selector: string, context: Object): T;
        jquery$11<T>(T: TypeArg<T>, element: Element): T;
        jquery$12<T>(T: TypeArg<T>, elements: Element[]): Object;
        jquery$15<T>(T: TypeArg<T>, obj: any): T;
        jquery$13<T>(T: TypeArg<T>, obj: Object): T;
        jquery$17<T>(T: TypeArg<T>, html: string, ownerDocument: Document): T;
        jquery$20<T>(T: TypeArg<T>, html: string, attributes: any): T;
        jquery$14<T>(T: TypeArg<T>, callback: Func$2<any, any>): T;
        hasStyle(element: HTMLElement, style: string): boolean;
        getStyles(element: HTMLElement): string;
        setStyles(element: HTMLElement, styles: string): void;
        append(child: HTMLElement): HTMLElement;
        append$1(parent: HTMLElement, child: HTMLElement): HTMLElement;
        append$2<T>(T: TypeArg<T>, child: HTMLElement): T;
        append$3<T>(T: TypeArg<T>, parent: HTMLElement, child: HTMLElement): T;
        setContent(element: HTMLElement, html: string): void;
        emptyContent(element: HTMLElement): void;
        unbindElement(element: HTMLElement): void;
        removeElement(element: HTMLElement): void;
        setData(element: HTMLElement, key: string, data: any): void;
        getData(element: HTMLElement, key: string): any;
        removeData$1(element: HTMLElement, key: string, children?: boolean): void;
        removeData$2(element: HTMLElement, keys: string[], children?: boolean): void;
        removeData(element: HTMLElement, children?: boolean): void;
        has(id: string): boolean;
        get(id: string): HTMLElement;
        get$4<T>(T: TypeArg<T>, id: string): T;
        has$1(doc: Document, id: string): boolean;
        get$1(doc: Document, id: string): HTMLElement;
        get$5<T>(T: TypeArg<T>, doc: Document, id: string): T;
        has$2(frag: DocumentFragment, id: string): boolean;
        get$2(frag: DocumentFragment, id: string): HTMLElement;
        get$6<T>(T: TypeArg<T>, frag: DocumentFragment, id: string): T;
        has$3(link: HTMLLinkElement, id: string): boolean;
        get$3(link: HTMLLinkElement, id: string): HTMLElement;
        get$7<T>(T: TypeArg<T>, link: HTMLLinkElement, id: string): T;
        getKeypath<T>(T: TypeArg<T>, obj: any, path: string): T;
        getIndexedDB(): IDBFactory;
        select(selectors: string): HTMLElement;
        select$5<T>(T: TypeArg<T>, selectors: string): T;
        selectAll(selectors: string): NodeList;
        select$1(doc: Document, selectors: string): HTMLElement;
        select$6<T>(T: TypeArg<T>, doc: Document, selectors: string): T;
        selectAll$1(doc: Document, selectors: string): NodeList;
        select$2(frag: DocumentFragment, selectors: string): HTMLElement;
        select$7<T>(T: TypeArg<T>, frag: DocumentFragment, selectors: string): T;
        selectAll$2(frag: DocumentFragment, selectors: string): NodeList;
        select$3(parent: HTMLElement, selectors: string): HTMLElement;
        select$8<T>(T: TypeArg<T>, parent: HTMLElement, selectors: string): T;
        selectAll$3(parent: HTMLElement, selectors: string): NodeList;
        select$4(link: HTMLLinkElement, selectors: string): HTMLElement;
        select$9<T>(T: TypeArg<T>, link: HTMLLinkElement, selectors: string): T;
        selectAll$4(link: HTMLLinkElement, selectors: string): NodeList;
        injectContent(loader: ContentLoader, timeout?: int, success?: Action$1<AsyncWaiter>, failure?: Action$1<Exception>): void;
        injectContentAsync(loader: ContentLoader, timeout?: int, exception?: Action$1<Exception>): Threading.Tasks.Task$1<AsyncWaiter>;
        injectStyle(id: string, content: Gateway.TextContent, type?: string): HTMLStyleElement;
        injectLink(id: string, url: string, type?: string, rel?: string, success?: Action$1<HTMLLinkElement>, failure?: Action$1<Exception>): void;
        injectLinkAsync(id: string, url: string, type?: string, rel?: string, exception?: Action$1<Exception>): Threading.Tasks.Task$1<HTMLLinkElement>;
        injectScript(id: string, content: Gateway.TextContent, type?: string): HTMLScriptElement;
        injectScript$1(id: string, url: string, type?: string, success?: Action$1<HTMLScriptElement>, failure?: Action$1<Exception>): void;
        injectScriptAsync(id: string, url: string, type?: string, exception?: Action$1<Exception>): Threading.Tasks.Task$1<HTMLScriptElement>;
        injectDocument(id: string, content: Document): HTMLObjectElement;
        injectDocument$1(id: string, url: string, success?: Action$1<HTMLObjectElement>, failure?: Action$1<Exception>): void;
        injectDocumentAsync(id: string, url: string, exception?: Action$1<Exception>): Threading.Tasks.Task$1<HTMLObjectElement>;
        parseInlineScriptAndStyle(id_prefix: string, doc: Document): void;
        get_ui(): UIManager;
        browser: Root.browserTypeFunc;
    }
    const Root: RootTypeFunc;

    // System.PlatformTools
    export interface PlatformToolsTypeFunc extends TypeFunction {
        (): PlatformToolsTypeFunc;
    }
    const PlatformTools: PlatformToolsTypeFunc;

    // System.AsyncWaiter
    export interface AsyncWaiter extends Object, IDisposable {
        get_errors(): Collections.Generic.List$1<string>;
        get_interval(): int;
        set_interval(value: int): void;
        get_timeout(): double;
        set_timeout(value: double): void;
        get_success(): Action$1<AsyncWaiter>;
        set_success(value: Action$1<AsyncWaiter>): void;
        get_failure(): Action$1<Exception>;
        set_failure(value: Action$1<Exception>): void;
        wait(expression: Func$1<boolean>): void;
        reset(): void;
        Dispose(): void;
    }
    export interface AsyncWaiterTypeFunc extends TypeFunction {
        (): AsyncWaiterTypeFunc;
        prototype: AsyncWaiter;
        new (): AsyncWaiter;
        ctor: { new (): AsyncWaiter; };
    }
    const AsyncWaiter: AsyncWaiterTypeFunc;

    // System.Template
    export interface TemplateTypeFunc extends TypeFunction {
        (): TemplateTypeFunc;
        caching: boolean;
        version: string;
        global: any;
        create(id: string, html: string, exec?: any, options?: any): MarkupTemplate;
        import(id: string, src?: string, exec?: any, options?: any): MarkupTemplate;
        get_helpers(): any;
        tools: Template.toolsTypeFunc;
    }
    const Template: TemplateTypeFunc;

    // System.MarkupTemplate
    export interface MarkupTemplate extends Object, IDisposable {
        id: string;
        exec: any;
        options: any;
        type(): string;
        compiled(): boolean;
        Dispose(): void;
    }
    export interface MarkupTemplateTypeFunc extends TypeFunction {
        (): MarkupTemplateTypeFunc;
        prototype: MarkupTemplate;
    }
    const MarkupTemplate: MarkupTemplateTypeFunc;

    // System.IViewController
    export interface IViewController extends IDisposable {
        System$IViewController$Initialize(container: HTMLElement, parameter: any, top: boolean): void;
    }
    const IViewController: TypeFunction;

    // System.ViewController<T>
    export interface ViewController$1<T> extends ViewController, IViewController, IDisposable {
        get_context$1(): T;
    }
    export interface ViewController$1TypeFunc<T> extends TypeFunction {
        (): ViewController$1TypeFunc<T>;
        prototype: ViewController$1<T>;
    }
    export function ViewController$1<T>(T: TypeArg<T>): ViewController$1TypeFunc<T>;

    // System.ViewController
    export interface ViewController extends Object, IViewController, IDisposable {
        get_root(): boolean;
        get_element(): HTMLElement;
        get_children(): Collections.Generic.List$1<IViewController>;
        get_template(): MarkupTemplate;
        get_context(): any;
        get_change(): ComponentModel.ChangeListener;
        Initialize(container: HTMLElement, parameter: any, top: boolean): void;
        Dispose(): void;
    }
    export interface ViewControllerTypeFunc extends TypeFunction {
        (): ViewControllerTypeFunc;
        prototype: ViewController;
    }
    const ViewController: ViewControllerTypeFunc;

    // System.PageDialog
    export interface PageDialog extends Object {
        open(options: OpenDialogOptions): void;
        close(): void;
        close$1(options: OpenDialogOptions): void;
    }
    export interface PageDialogTypeFunc extends TypeFunction {
        (): PageDialogTypeFunc;
        prototype: PageDialog;
        MODAL_OVERLAY_INDEX: int;
        MODAL_DIALOG_INDEX: int;
        MODAL_CONTENT_INDEX: int;
        new (): PageDialog;
        ctor: { new (): PageDialog; };
        get_dialogs(): Collections.Generic.List$1<OpenDialogOptions>;
    }
    const PageDialog: PageDialogTypeFunc;

    // System.ModalDialogOptions
    export interface ModalDialogOptions extends Object {
        background: string;
        overlayColor: string;
        overlayClose: boolean;
        escKey: boolean;
        zfactor: boolean;
        open: Action;
        complete: Action;
        close: Action;
    }
    export interface ModalDialogOptionsTypeFunc extends TypeFunction {
        (): ModalDialogOptionsTypeFunc;
        prototype: ModalDialogOptions;
        new (): ModalDialogOptions;
        ctor: { new (): ModalDialogOptions; };
    }
    const ModalDialogOptions: ModalDialogOptionsTypeFunc;

    // System.OpenDialogOptions
    export interface OpenDialogOptions extends Object, IDisposable {
        size: string;
        width: int;
        height: int;
        background: string;
        overlayColor: string;
        overlayClose: boolean;
        escKey: boolean;
        zfactor: boolean;
        open: Action;
        complete: Action;
        close: Action;
        get_body(): HTMLElement;
        get_dialog(): HTMLElement;
        get_content(): HTMLElement;
        get_overlay(): HTMLElement;
        get_animation(): ModalAnimation;
        get_effects(): ModalAnimationSet;
        get_view(): IViewController;
        set_view(value: IViewController): void;
        Dispose(): void;
    }
    export interface OpenDialogOptionsTypeFunc extends TypeFunction {
        (): OpenDialogOptionsTypeFunc;
        prototype: OpenDialogOptions;
        new (animation?: ModalAnimation): OpenDialogOptions;
        ctor: { new (animation?: ModalAnimation): OpenDialogOptions; };
    }
    const OpenDialogOptions: OpenDialogOptionsTypeFunc;

    // System.ContentLoader
    export interface ContentLoader extends Object, IDisposable {
        get_waiter(): AsyncWaiter;
        set_waiter(value: AsyncWaiter): void;
        get_links(): Collections.Generic.List$1<LinkInfo>;
        get_scripts(): Collections.Generic.List$1<ScriptInfo>;
        get_documents(): Collections.Generic.List$1<DocumentInfo>;
        get_progress(): Action$1<LoaderEvent>;
        set_progress(value: Action$1<LoaderEvent>): void;
        addDocument(id: string, href: string): void;
        addLink(id: string, href: string, type?: string, rel?: string): void;
        addScript(id: string, src: string, type?: string): void;
        allLoaded(): boolean;
        getCount(): int;
        clear(): void;
        Dispose(): void;
    }
    export interface ContentLoaderTypeFunc extends TypeFunction {
        (): ContentLoaderTypeFunc;
        prototype: ContentLoader;
        DefaultTimeout: int;
        new (): ContentLoader;
        ctor: { new (): ContentLoader; };
    }
    const ContentLoader: ContentLoaderTypeFunc;

    // System.ScriptInfo
    export interface ScriptInfo extends Object {
        get__id(): string;
        set__id(value: string): void;
        get__src(): string;
        set__src(value: string): void;
        get__type(): string;
        set__type(value: string): void;
        get__loading(): boolean;
        set__loading(value: boolean): void;
    }
    export interface ScriptInfoTypeFunc extends TypeFunction {
        (): ScriptInfoTypeFunc;
        prototype: ScriptInfo;
        new (): ScriptInfo;
        ctor: { new (): ScriptInfo; };
    }
    const ScriptInfo: ScriptInfoTypeFunc;

    // System.LinkInfo
    export interface LinkInfo extends Object {
        get__id(): string;
        set__id(value: string): void;
        get__href(): string;
        set__href(value: string): void;
        get__type(): string;
        set__type(value: string): void;
        get__rel(): string;
        set__rel(value: string): void;
        get__loading(): boolean;
        set__loading(value: boolean): void;
    }
    export interface LinkInfoTypeFunc extends TypeFunction {
        (): LinkInfoTypeFunc;
        prototype: LinkInfo;
        new (): LinkInfo;
        ctor: { new (): LinkInfo; };
    }
    const LinkInfo: LinkInfoTypeFunc;

    // System.DocumentInfo
    export interface DocumentInfo extends Object {
        get__id(): string;
        set__id(value: string): void;
        get__href(): string;
        set__href(value: string): void;
        get__loading(): boolean;
        set__loading(value: boolean): void;
    }
    export interface DocumentInfoTypeFunc extends TypeFunction {
        (): DocumentInfoTypeFunc;
        prototype: DocumentInfo;
        new (): DocumentInfo;
        ctor: { new (): DocumentInfo; };
    }
    const DocumentInfo: DocumentInfoTypeFunc;

    // System.XmlContent
    export interface XmlContentTypeFunc extends TypeFunction {
        (): XmlContentTypeFunc;
        Parse(content: string): Document;
    }
    const XmlContent: XmlContentTypeFunc;

    // System.DocumentContent
    export interface DocumentContent extends Object {
        get_Content(): Document;
        set_Content(value: Document): void;
        get_Request(): string;
        set_Request(value: string): void;
        get_Response(): string;
        set_Response(value: string): void;
        get_Status(): string;
        set_Status(value: string): void;
        get_Code(): int;
        set_Code(value: int): void;
    }
    export interface DocumentContentTypeFunc extends TypeFunction {
        (): DocumentContentTypeFunc;
        prototype: DocumentContent;
        HtmlMimeType: string;
        new (): DocumentContent;
        ctor: { new (): DocumentContent; };
        ctor$1: { new (content: Document): DocumentContent; };
    }
    const DocumentContent: DocumentContentTypeFunc;

    // System.UIManagerExtensions
    export interface UIManagerExtensionsTypeFunc extends TypeFunction {
        (): UIManagerExtensionsTypeFunc;
        hasRequired(source: UIManager): boolean;
        hasDialog(source: UIManager): boolean;
        hasPerspectiveBackdrop(source: UIManager): void;
        setPerspectiveBackdrop(source: UIManager): void;
        removePerspectiveBackdrop(source: UIManager): void;
        getViewPort(source: UIManager): HTMLElement;
        clearViewPort(source: UIManager): void;
        getPageView(source: UIManager): IViewController;
        setPageView$2<T>(T: TypeArg<T>, source: UIManager, animation?: PageAnimation, exception?: Action$1<Exception>): boolean;
        setPageView(source: UIManager, type: string, animation?: PageAnimation, exception?: Action$1<Exception>): boolean;
        setPageView$3<T>(T: TypeArg<T>, source: UIManager, parameter: any, animation?: PageAnimation, exception?: Action$1<Exception>): boolean;
        setPageView$1(source: UIManager, type: string, parameter: any, animation?: PageAnimation, exception?: Action$1<Exception>): boolean;
        parseHtmlDataAttributes(source: UIManager, parent: HTMLElement, context?: any, bus?: Gateway.Events.EventBus): Collections.Generic.List$1<IViewController>;
        directive(source: UIManager, directive: string, handler: Action$1<DirectiveEvent>): void;
        getDefaultModalAnimation(source: UIManager): ModalAnimation;
        setDefaultModalAnimation(source: UIManager, animation: ModalAnimation): void;
        getDefaultModalOptions(source: UIManager): ModalDialogOptions;
        setDefaultModalOptions(source: UIManager, options: ModalDialogOptions): void;
        getCusomtModalEffect(source: UIManager): ModalAnimationSet;
        setCustomModalEffect(source: UIManager, custom: ModalAnimationSet): void;
        closeDialogView(source: UIManager): void;
        openDialogView$6<T>(T: TypeArg<T>, source: UIManager, animation?: ModalAnimation, options?: ModalDialogOptions, exception?: Action$1<Exception>): boolean;
        openDialogView(source: UIManager, type: string, animation?: ModalAnimation, options?: ModalDialogOptions, exception?: Action$1<Exception>): boolean;
        openDialogView$8<T>(T: TypeArg<T>, source: UIManager, parameter: any, animation?: ModalAnimation, options?: ModalDialogOptions, exception?: Action$1<Exception>): boolean;
        openDialogView$2(source: UIManager, type: string, parameter: any, animation?: ModalAnimation, options?: ModalDialogOptions, exception?: Action$1<Exception>): boolean;
        openDialogView$7<T>(T: TypeArg<T>, source: UIManager, size: DialogSize, animation?: ModalAnimation, options?: ModalDialogOptions, exception?: Action$1<Exception>): boolean;
        openDialogView$1(source: UIManager, type: string, size: DialogSize, animation?: ModalAnimation, options?: ModalDialogOptions, exception?: Action$1<Exception>): boolean;
        openDialogView$10<T>(T: TypeArg<T>, source: UIManager, parameter: any, size: DialogSize, animation?: ModalAnimation, options?: ModalDialogOptions, exception?: Action$1<Exception>): boolean;
        openDialogView$4(source: UIManager, type: string, parameter: any, size: DialogSize, animation?: ModalAnimation, options?: ModalDialogOptions, exception?: Action$1<Exception>): boolean;
        openDialogView$9<T>(T: TypeArg<T>, source: UIManager, width: int, height: int, animation?: ModalAnimation, options?: ModalDialogOptions, exception?: Action$1<Exception>): boolean;
        openDialogView$3(source: UIManager, type: string, width: int, height: int, animation?: ModalAnimation, options?: ModalDialogOptions, exception?: Action$1<Exception>): boolean;
        openDialogView$11<T>(T: TypeArg<T>, source: UIManager, parameter: any, width: int, height: int, animation?: ModalAnimation, options?: ModalDialogOptions, exception?: Action$1<Exception>): boolean;
        openDialogView$5(source: UIManager, type: string, parameter: any, width: int, height: int, animation?: ModalAnimation, options?: ModalDialogOptions, exception?: Action$1<Exception>): boolean;
        getDefaultPageAnimation(source: UIManager): PageAnimation;
        setDefaultPageAnimation(source: UIManager, animation: PageAnimation): void;
        getCusomtPageAnimation(source: UIManager): PageAnimationSet;
        setCustomPageAnimation(source: UIManager, custom: PageAnimationSet): void;
        getAnimationEndEvent(source: UIManager): Action;
        setAnimationEndEvent(source: UIManager, handler: Action): void;
        reset(source: UIManager): void;
        navigate(source: UIManager, path: string, history?: RouteHistory): void;
        route(source: UIManager, path: string, handler: Action$1<RouteEvent>): void;
        missing(source: UIManager, handler: Action$1<RouteEvent>): void;
    }
    const UIManagerExtensions: UIManagerExtensionsTypeFunc;

    // System.LoaderEvent
    export interface LoaderEvent extends Object {
        get_id(): string;
        get_url(): string;
        get_type(): string;
        get_num(): int;
        get_total(): int;
    }
    export interface LoaderEventTypeFunc extends TypeFunction {
        (): LoaderEventTypeFunc;
        prototype: LoaderEvent;
        new (i: string, u: string, t: string, nn: int, tt: int): LoaderEvent;
        ctor: { new (i: string, u: string, t: string, nn: int, tt: int): LoaderEvent; };
    }
    const LoaderEvent: LoaderEventTypeFunc;

    // System.DirectiveEvent
    export interface DirectiveEvent extends Object {
        get_directive(): string;
        get_element(): HTMLElement;
    }
    export interface DirectiveEventTypeFunc extends TypeFunction {
        (): DirectiveEventTypeFunc;
        prototype: DirectiveEvent;
        new (d: string, e: HTMLElement): DirectiveEvent;
        ctor: { new (d: string, e: HTMLElement): DirectiveEvent; };
    }
    const DirectiveEvent: DirectiveEventTypeFunc;

    // System.RouteEvent
    export interface RouteEvent extends Object {
        get_path(): string;
        get_query(): string;
        get_parameters(): string;
    }
    export interface RouteEventTypeFunc extends TypeFunction {
        (): RouteEventTypeFunc;
        prototype: RouteEvent;
        new (p: string, q: string, x?: any): RouteEvent;
        ctor: { new (p: string, q: string, x?: any): RouteEvent; };
    }
    const RouteEvent: RouteEventTypeFunc;

    // System.RouteHistory
    export enum RouteHistory {
        Enabled = 0,
        Disabled = 1
    }

    // System.RoutePath
    export interface RoutePathTypeFunc extends TypeFunction {
        (): RoutePathTypeFunc;
        get_NotFound(): Action$1<RouteEvent>;
        set_NotFound(value: Action$1<RouteEvent>): void;
    }
    const RoutePath: RoutePathTypeFunc;

    // System.UIManager
    export interface UIManager extends Object {
        autoSplash: boolean;
        get_onAlertMessage(): UIManager.AlertDelegate;
        set_onAlertMessage(value: UIManager.AlertDelegate): void;
        get_onRenderMarkup(): UIManager.MarkupDeleagte;
        set_onRenderMarkup(value: UIManager.MarkupDeleagte): void;
        get_onSplashContainer(): UIManager.SplashDelegate;
        set_onSplashContainer(value: UIManager.SplashDelegate): void;
        get_onUnsplashContainer(): Action;
        set_onUnsplashContainer(value: Action): void;
        get_dialog(): PageDialog;
        alert(message: string, type?: string, caption?: string, callback?: Delegate): void;
        markup$1(html: string, element: HTMLElement, context?: any, options?: any, exec?: any, id?: string): void;
        markup(template: MarkupTemplate, element: HTMLElement, context: any): void;
        splash(container?: HTMLElement, clear?: boolean): void;
        unsplash(): void;
        setContentView$3<T>(T: TypeArg<T>, container_id: string, success: Action$1<IViewController>, failure?: Action$1<Exception>, parameter?: any): boolean;
        setContentViewAsync$3<T>(T: TypeArg<T>, container_id: string, exception?: Action$1<Exception>, parameter?: any): Threading.Tasks.Task$1<IViewController>;
        setContentView$1(type: string, container_id: string, success: Action$1<IViewController>, failure?: Action$1<Exception>, parameter?: any): boolean;
        setContentViewAsync$1(type: string, container_id: string, exception?: Action$1<Exception>, parameter?: any): Threading.Tasks.Task$1<IViewController>;
        setContentView$2<T>(T: TypeArg<T>, container: HTMLElement, success: Action$1<IViewController>, failure?: Action$1<Exception>, parameter?: any): boolean;
        setContentViewAsync$2<T>(T: TypeArg<T>, container: HTMLElement, exception?: Action$1<Exception>, parameter?: any): Threading.Tasks.Task$1<IViewController>;
        setContentView(type: string, container: HTMLElement, success: Action$1<IViewController>, failure?: Action$1<Exception>, parameter?: any): boolean;
        setContentViewAsync(type: string, container: HTMLElement, exception?: Action$1<Exception>, parameter?: any): Threading.Tasks.Task$1<IViewController>;
    }
    export interface UIManagerTypeFunc extends TypeFunction {
        (): UIManagerTypeFunc;
        prototype: UIManager;
        ROOT_CONTAINER: string;
        VIEWPORT_CLASS: string;
        CONTENT_VIEW: string;
        CONTENT_VIEW_ONTOP: string;
        CONTENT_VIEW_CURRENT: string;
        CONTENT_VIEW_PERSPECTIVE: string;
        MODAL_SHOW: string;
        MODAL_DIALOG: string;
        MODAL_DIALOG_CONTENT: string;
        MODAL_DIALOG_CONTENT_SELECT: string;
        MODAL_DIALOG_CONTENT_SCALED: string;
        MODAL_DIALOG_OVERLAY: string;
        MODAL_DIALOG_OVERLAY_SELECT: string;
        MODAL_DIALOG_PERSPECTIVE: string;
        new (): UIManager;
        ctor: { new (): UIManager; };
        get_splasher(): HTMLDivElement;
        AlertDelegate: UIManager.AlertDelegate;
        MarkupDeleagte: UIManager.MarkupDeleagte;
        SplashDelegate: UIManager.SplashDelegate;
    }
    const UIManager: UIManagerTypeFunc;

    // System.PageAnimation
    export enum PageAnimation {
        None = -100,
        Disable = -10,
        Custom = -1,
        Default = 0,
        MoveFromRight = 1,
        MoveFromLeft = 2,
        MoveFromBottom = 3,
        MoveFromTop = 4,
        FadeFromRight = 5,
        FadeFromLeft = 6,
        FadeFromBottom = 7,
        FadeFromTop = 8,
        FadeLeftRight = 9,
        FadeRightLeft = 10,
        FadeTopBottom = 11,
        FadeBottomTop = 12,
        EasingFromRight = 13,
        EasingFromLeft = 14,
        EasingFromBottom = 15,
        EasingFromTop = 16,
        ScaleDownFromRight = 17,
        ScaleDownFromLeft = 18,
        ScaleDownFromBottom = 19,
        ScaleDownFromTop = 20,
        ScaleDownScaleDown = 21,
        ScaleUpScaleUp = 22,
        MoveToLeftScaleUp = 23,
        MoveToRightScaleUp = 24,
        MoveToTopScaleUp = 25,
        MoveToBottomScaleUp = 26,
        ScaleDownScaleUp = 27,
        GlueLeftFromRight = 28,
        GlueRightFromLeft = 29,
        GlueBottomFromTop = 30,
        GlueTopFromBottom = 31,
        FlipToRight = 32,
        FlipToLeft = 33,
        FlipToTop = 34,
        FlipToBottom = 35,
        Falling = 36,
        Newspaper = 37,
        PushLeftFromRight = 38,
        PushRightFromLeft = 39,
        PushTopFromBottom = 40,
        PushBottomFromTop = 41,
        PushLeftPullRight = 42,
        PushRightPullLeft = 43,
        PushTopPullBottom = 44,
        PushBottomPullTop = 45,
        FoldLeftFromRight = 46,
        FoldRightFromLeft = 47,
        FoldTopFromBottom = 48,
        FoldBottomFromTop = 49,
        MoveToRightUnfoldLeft = 50,
        MoveToLeftUnfoldRight = 51,
        MoveToBottomUnfoldTop = 52,
        MoveToTopUnfoldBottom = 53,
        RoomToLeft = 54,
        RoomToRight = 55,
        RoomToTop = 56,
        RoomToBottom = 57,
        CubeToLeft = 58,
        CubeToRight = 59,
        CubeToTop = 60,
        CubeToBottom = 61,
        CarouselToLeft = 62,
        CarouselToRight = 63,
        CarouselToTop = 64,
        CarouselToBottom = 65,
        RotateSlide = 66
    }

    // System.PageAnimationSet
    export interface PageAnimationSet extends Object {
        get_outClass(): string;
        get_inClass(): string;
        get_isPerspective(): boolean;
        get_duration(): int;
        get_isValid(): boolean;
    }
    export interface PageAnimationSetTypeFunc extends TypeFunction {
        (): PageAnimationSetTypeFunc;
        prototype: PageAnimationSet;
        maxAnimations: int;
        cssClasses: PageAnimationSet[];
        cssSelectors: Collections.Generic.List$1<string>;
        cssDurations: Collections.Generic.List$1<string>;
        new (outClass: string, inClass: string, isPerspective: boolean, cssDuration?: int): PageAnimationSet;
        ctor: { new (outClass: string, inClass: string, isPerspective: boolean, cssDuration?: int): PageAnimationSet; };
        parseSelectors(): void;
        hasSelector(selector: string): boolean;
        getDuration(selector: string): int;
    }
    const PageAnimationSet: PageAnimationSetTypeFunc;

    // System.ModalAnimation
    export enum ModalAnimation {
        None = -100,
        Disable = -10,
        Custom = -1,
        Default = 0,
        FadeIn = 1,
        SlideRight = 2,
        SlideBottom = 3,
        Newspaper = 4,
        Fall = 5,
        SideFall = 6,
        StickyUp = 7,
        FlipHorizontal = 8,
        FlipVertical = 9,
        Sign = 10,
        SuperScaled = 11,
        Popup = 12,
        Slit = 13,
        RotateBottom = 14,
        RotateLeft = 15,
        Blur = 16,
        Reveal = 17,
        SneakUnder = 18,
        SlipOver = 19,
        MakeWay = 20,
        ContentScale = 21,
        WindowStack = 22
    }

    // System.ModalAnimationSet
    export interface ModalAnimationSet extends Object {
        get_effect(): string;
        get_isWindow(): boolean;
        get_isScaled(): boolean;
        get_isPerspective(): boolean;
        get_duration(): int;
    }
    export interface ModalAnimationSetTypeFunc extends TypeFunction {
        (): ModalAnimationSetTypeFunc;
        prototype: ModalAnimationSet;
        maxTransitions: int;
        cssTransitions: ModalAnimationSet[];
        new (effect: string, cssDuration?: int, isScaled?: boolean, isPerspective?: boolean, isWindow?: boolean): ModalAnimationSet;
        ctor: { new (effect: string, cssDuration?: int, isScaled?: boolean, isPerspective?: boolean, isWindow?: boolean): ModalAnimationSet; };
    }
    const ModalAnimationSet: ModalAnimationSetTypeFunc;

    // System.DialogSize
    export enum DialogSize {
        Default = 0,
        ExtraSmall = 1,
        Small = 2,
        Medium = 3,
        Large = 4,
        ExtraLarge = 5,
        HighDefinition = 6,
        LongExtraSmall = 7,
        LongSmall = 8,
        LongMedium = 9,
        Custom = 10
    }

    // System.PageView
    export interface PageViewTypeFunc extends TypeFunction {
        (): PageViewTypeFunc;
        isInitialized: boolean;
        isAnimating: boolean;
        supportviews: boolean;
        supportmodal: boolean;
        DATA_TOGGLE: string;
        DATA_TARGET: string;
        DATA_TWOWAY: string;
        DATA_CONTENT: string;
        DATA_BINDING: string;
        DATA_COMMAND: string;
        DATA_DISMISS: string;
        DATA_PARAMETER: string;
        DATA_ANIMATION: string;
        DATA_DIRECTIVE: string;
        DATA_EXECUTE: string;
        DATA_OPTIONS: string;
        RESET_NODES: boolean;
        init(page: boolean, root: boolean, animation: PageAnimation, view: IViewController, container: HTMLElement, parameter: any, dialog?: boolean): boolean;
        getModalAnimationSet(animation: ModalAnimation): ModalAnimationSet;
        getModalDialogSize(sizes: DialogSize): string;
    }
    const PageView: PageViewTypeFunc;

    // System.StringExtensions
    export interface StringExtensionsTypeFunc extends TypeFunction {
        (): StringExtensionsTypeFunc;
        TryGet<T>(T: TypeArg<T>, source: string): Nullable$1<T>;
    }
    const StringExtensions: StringExtensionsTypeFunc;

    // System.TypeHelperExtension
    export interface TypeHelperExtensionTypeFunc extends TypeFunction {
        (): TypeHelperExtensionTypeFunc;
        IsXmlDocumentType(t: Type): boolean;
        IsDataSetType(t: Type): boolean;
        IsDataTableType(t: Type): boolean;
        IsStreamType(t: Type): boolean;
        IsMemoryStreamType(t: Type): boolean;
        IsByteArrayType(t: Type): boolean;
        IsBlobType(t: Type): boolean;
        IsDateTimeType(t: Type): boolean;
        IsSimpleType(t: Type): boolean;
    }
    const TypeHelperExtension: TypeHelperExtensionTypeFunc;
    module Gateway {
        // System.Gateway.NativeAjaxService
        export interface NativeAjaxService extends Object, IAjaxService {
            Get(url: string, success?: Action$1<AjaxResponse>, failure?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): void;
            GetAsync(url: string, exception?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
            Post(url: string, data: any, type?: string, success?: Action$1<AjaxResponse>, failure?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): void;
            PostAsync(url: string, data: any, type?: string, exception?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
            PostJson(url: string, data: any, success?: Action$1<AjaxResponse>, failure?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): void;
            PostJsonAsync(url: string, data: any, exception?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
            Put(url: string, data: any, type?: string, success?: Action$1<AjaxResponse>, failure?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): void;
            PutAsync(url: string, data: any, type?: string, exception?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
            PutJson(url: string, data: any, success?: Action$1<AjaxResponse>, failure?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): void;
            PutJsonAsync(url: string, data: any, exception?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
            Delete(url: string, success?: Action$1<AjaxResponse>, failure?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): void;
            DeleteAsync(url: string, exception?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<AjaxResponse>;
        }
        export interface NativeAjaxServiceTypeFunc extends TypeFunction {
            (): NativeAjaxServiceTypeFunc;
            prototype: NativeAjaxService;
            new (): NativeAjaxService;
            ctor: { new (): NativeAjaxService; };
        }
        const NativeAjaxService: NativeAjaxServiceTypeFunc;

        // System.Gateway.NativeRemoteService
        export interface NativeRemoteService extends Object, IRemoteService, IService {
            CallMethod<T>(T: TypeArg<T>, url: string, service: string, method: string, parameters?: any[], success?: Action$1<T>, failure?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): void;
            CallMethodAsync<T>(T: TypeArg<T>, url: string, service: string, method: string, parameters?: any[], exception?: Action$1<Exception>, headers?: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<T>;
        }
        export interface NativeRemoteServiceTypeFunc extends TypeFunction {
            (): NativeRemoteServiceTypeFunc;
            prototype: NativeRemoteService;
            new (): NativeRemoteService;
            ctor: { new (): NativeRemoteService; };
        }
        const NativeRemoteService: NativeRemoteServiceTypeFunc;

        // System.Gateway.HttpClientManager
        export interface HttpClientManagerTypeFunc extends TypeFunction {
            (): HttpClientManagerTypeFunc;
            RpcFormContentType: string;
            RpcFlashContentType: string;
            RpcBinaryContentType: string;
            RpcScriptContentType: string;
            RpcPostContentType: string;
            RpcNativeContentType: string;
            RpcJsonContentType: string;
            RpcXmlContentType: string;
            RpcHtmlContentType: string;
            RpcTextContentType: string;
            RpcPostRequestType: string;
            RpcGetRequestType: string;
            RpcOptionsRequestType: string;
            RpcNullType: string;
            RpcVoidType: string;
            RpcXmlResponseType: string;
            RpcJsonResponseType: string;
            RpcNullResponseType: string;
            RpcVoidResponseType: string;
            RpcStringResponseType: string;
            RpcBooleanResponseType: string;
            RpcDecimalResponseType: string;
            RpcDoubleResponseType: string;
            RpcSingleResponseType: string;
            RpcInt16ResponseType: string;
            RpcInt32ResponseType: string;
            RpcInt64ResponseType: string;
            RpcIntPtrResponseType: string;
            RpcUInt16ResponseType: string;
            RpcUInt32ResponseType: string;
            RpcUInt64ResponseType: string;
            RpcUIntPtrResponseType: string;
            RpcBase64ResponseType: string;
            RpcCharResponseType: string;
            RpcByteResponseType: string;
            RpcSByteResponseType: string;
            RpcDateTimeResponseType: string;
            RpcInteropResponseType: string;
            RpcDataSetResponseType: string;
            RpcDataTableResponseType: string;
            RpcBinaryResponseType: string;
            RequestFactory: Func$1<XMLHttpRequest>;
        }
        const HttpClientManager: HttpClientManagerTypeFunc;

        // System.Gateway.AjaxRuntime
        export interface AjaxRuntimeTypeFunc extends TypeFunction {
            (): AjaxRuntimeTypeFunc;
            get_Started(): boolean;
        }
        const AjaxRuntime: AjaxRuntimeTypeFunc;

        // System.Gateway.Runtime
        export interface RuntimeTypeFunc extends TypeFunction {
            (): RuntimeTypeFunc;
            LOCAL_SERVICE: string;
            RpcNativeContentType: string;
            RpcNullType: string;
            RpcVoidType: string;
            RpcXmlResponseType: string;
            RpcJsonResponseType: string;
            RpcNullResponseType: string;
            RpcVoidResponseType: string;
            RpcErrorResponseType: string;
            RpcStringResponseType: string;
            RpcBooleanResponseType: string;
            RpcDecimalResponseType: string;
            RpcDoubleResponseType: string;
            RpcSingleResponseType: string;
            RpcInt16ResponseType: string;
            RpcInt32ResponseType: string;
            RpcInt64ResponseType: string;
            RpcIntPtrResponseType: string;
            RpcUInt16ResponseType: string;
            RpcUInt32ResponseType: string;
            RpcUInt64ResponseType: string;
            RpcUIntPtrResponseType: string;
            RpcBase64ResponseType: string;
            RpcCharResponseType: string;
            RpcByteResponseType: string;
            RpcSByteResponseType: string;
            RpcDateTimeResponseType: string;
            RpcInteropResponseType: string;
            RpcDataSetResponseType: string;
            RpcDataTableResponseType: string;
            RpcDefaultResponseType: string;
            RpcBinaryResponseType: string;
            get_Ioc(): Ioc.MicroIoc;
        }
        const Runtime: RuntimeTypeFunc;

        // System.Gateway.TextContent
        export interface TextContent extends Object {
            get_Content(): string;
            set_Content(value: string): void;
        }
        export interface TextContentTypeFunc extends TypeFunction {
            (): TextContentTypeFunc;
            prototype: TextContent;
            ScriptMimeType: string;
            TextMimeType: string;
            HtmlMimeType: string;
            CssMimeType: string;
            XmlMimeType: string;
            JsonMimeType: string;
            RelStyleSheet: string;
            RelImport: string;
            new (): TextContent;
            ctor: { new (): TextContent; };
            ctor$1: { new (content: string): TextContent; };
        }
        const TextContent: TextContentTypeFunc;

        // System.Gateway.IRemoteService
        export interface IRemoteService extends IService {
            System$Gateway$IRemoteService$CallMethod<T>(T: TypeArg<T>, url: string, service: string, method: string, parameters: any[], success: Action$1<T>, failure: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): void;
            System$Gateway$IRemoteService$CallMethodAsync<T>(T: TypeArg<T>, url: string, service: string, method: string, parameters: any[], exception: Action$1<Exception>, headers: Collections.Generic.Dictionary$2<string, string>): Threading.Tasks.Task$1<T>;
        }
        const IRemoteService: TypeFunction;

        // System.Gateway.RemoteService
        export interface RemoteService extends Object {
            get_Url(): string;
            get_Service(): string;
            get_Proxy(): IRemoteService;
            get_Headers(): Collections.Generic.Dictionary$2<string, string>;
            get_Exceptions(): Action$1<Exception>;
            CallMethod<T>(T: TypeArg<T>, method: string, parameters?: any[], success?: Action$1<T>, failure?: Action$1<Exception>): void;
            CallMethodAsync<T>(T: TypeArg<T>, method: string, parameters?: any[], exception?: Action$1<Exception>): Threading.Tasks.Task$1<T>;
        }
        export interface RemoteServiceTypeFunc extends TypeFunction {
            (): RemoteServiceTypeFunc;
            prototype: RemoteService;
            AuthenticationHeader: string;
            DefaultGateway: string;
            DefaultTimeout: int;
            new (gatewayUrl?: string, defaultExceptions?: Action$1<Exception>): RemoteService;
            ctor: { new (gatewayUrl?: string, defaultExceptions?: Action$1<Exception>): RemoteService; };
            AuthenticateUser(username: string, password: string, auxiliary: string, gateway?: string, success?: Action$1<boolean>, failure?: Action$1<Exception>): void;
            AuthenticateUserAsync(username: string, password: string, auxiliary: string, gateway?: string, error?: Action$1<Exception>): Threading.Tasks.Task$1<boolean>;
            ClearCredentials(): void;
            SetDefaultTicket(ticket: string): void;
            get_DefaultTicket(): string;
            get_DefaultHeaders(): Collections.Generic.Dictionary$2<string, string>;
            Create<T>(T: TypeArg<T>, gatewayurl?: string, defaultExceptions?: Action$1<Exception>): T;
            Create$1<T, R>(T: TypeArg<T>, R: TypeArg<R>, gatewayurl?: string, defaultExceptions?: Action$1<Exception>): T;
        }
        const RemoteService: RemoteServiceTypeFunc;

        // System.Gateway.RemoteMethodAttribute
        export interface RemoteMethodAttribute extends Attribute {
            get_Name(): string;
            set_Name(value: string): void;
        }
        export interface RemoteMethodAttributeTypeFunc extends TypeFunction {
            (): RemoteMethodAttributeTypeFunc;
            prototype: RemoteMethodAttribute;
            new (): RemoteMethodAttribute;
            ctor: { new (): RemoteMethodAttribute; };
        }
        const RemoteMethodAttribute: RemoteMethodAttributeTypeFunc;

        // System.Gateway.LocalBridge
        export enum LocalBridge {
            Enabled = 0,
            Disabled = 1,
            Unknown = 2
        }

        // System.Gateway.LocalPlatform
        export enum LocalPlatform {
            Browser = 0,
            Macintosh = 1,
            Windows = 2,
            Android = 3,
            Ios = 4,
            Unknown = 5
        }

        // System.Gateway.LocalGateway
        export interface LocalGatewayTypeFunc extends TypeFunction {
            (): LocalGatewayTypeFunc;
            get_Bridge(): LocalBridge;
            get_Platform(): LocalPlatform;
            RegisterHandler(message: string, handler: Action): void;
            RegisterHandler$1<T>(T: TypeArg<T>, message: string, handler: Action$1<T>): void;
            UnregisterHandler(message: string): void;
        }
        const LocalGateway: LocalGatewayTypeFunc;

        // System.Gateway.LocalService
        export interface LocalService extends Object {
        }
        export interface LocalServiceTypeFunc extends TypeFunction {
            (): LocalServiceTypeFunc;
            prototype: LocalService;
        }
        const LocalService: LocalServiceTypeFunc;

        // System.Gateway.Features
        export interface FeaturesTypeFunc extends TypeFunction {
            (): FeaturesTypeFunc;
            supportsAjax(): boolean;
            supportsImport(): boolean;
            supportsTemplate(): boolean;
            supportsRouting(): boolean;
            supportsDocuments(): boolean;
            supportsBridge(): boolean;
            supportsMacintosh(): boolean;
            supportsWindows(): boolean;
            supportsAndroid(): boolean;
            supportsIos(): boolean;
        }
        const Features: FeaturesTypeFunc;

        // System.Gateway.NativeConsoleService
        export interface NativeConsoleService extends Object, IConsoleService {
            WriteLine(value: string): void;
        }
        export interface NativeConsoleServiceTypeFunc extends TypeFunction {
            (): NativeConsoleServiceTypeFunc;
            prototype: NativeConsoleService;
            new (): NativeConsoleService;
            ctor: { new (): NativeConsoleService; };
        }
        const NativeConsoleService: NativeConsoleServiceTypeFunc;
        module Events {
            // System.Gateway.Events.EventBus
            export interface EventBus extends Object, IDisposable {
                Notify(message: string): int;
                Notify$1(message: string, data: any): int;
                Notify$2<T>(T: TypeArg<T>, message: string, data: T): int;
                Register(message: string, action: Action): void;
                Register$1<T>(T: TypeArg<T>, message: string, action: Action$1<T>): void;
                Unregister(message: string): int;
                Clear(): void;
                Dispose(): void;
            }
            export interface EventBusTypeFunc extends TypeFunction {
                (): EventBusTypeFunc;
                prototype: EventBus;
                new (): EventBus;
                ctor: { new (): EventBus; };
                get_Default(): EventBus;
            }
            const EventBus: EventBusTypeFunc;
        }
        module Ioc {
            // System.Gateway.Ioc.IMicroIoc
            export interface IMicroIoc extends IServiceLocator, IServiceProvider {
                System$Gateway$Ioc$IMicroIoc$ContainsCreated<TClass>(TClass: TypeArg<TClass>): boolean;
                System$Gateway$Ioc$IMicroIoc$ContainsCreated$1<TClass>(TClass: TypeArg<TClass>, key: string): boolean;
                System$Gateway$Ioc$IMicroIoc$IsRegistered<T>(T: TypeArg<T>): boolean;
                System$Gateway$Ioc$IMicroIoc$IsRegistered$1<T>(T: TypeArg<T>, key: string): boolean;
                System$Gateway$Ioc$IMicroIoc$Register$6<TInterface, TClass>(TInterface: TypeArg<TInterface>, TClass: TypeArg<TClass>): void;
                System$Gateway$Ioc$IMicroIoc$Register$8<TInterface, TClass>(TInterface: TypeArg<TInterface>, TClass: TypeArg<TClass>, createInstanceImmediately: boolean): void;
                System$Gateway$Ioc$IMicroIoc$Register$7<TInterface, TClass>(TInterface: TypeArg<TInterface>, TClass: TypeArg<TClass>, factory: Func$1<TClass>): void;
                System$Gateway$Ioc$IMicroIoc$Register$9<TInterface, TClass>(TInterface: TypeArg<TInterface>, TClass: TypeArg<TClass>, factory: Func$1<TClass>, createInstanceImmediately: boolean): void;
                System$Gateway$Ioc$IMicroIoc$Register<TClass>(TClass: TypeArg<TClass>): void;
                System$Gateway$Ioc$IMicroIoc$Register$2<TClass>(TClass: TypeArg<TClass>, createInstanceImmediately: boolean): void;
                System$Gateway$Ioc$IMicroIoc$Register$1<TClass>(TClass: TypeArg<TClass>, factory: Func$1<TClass>): void;
                System$Gateway$Ioc$IMicroIoc$Register$3<TClass>(TClass: TypeArg<TClass>, factory: Func$1<TClass>, createInstanceImmediately: boolean): void;
                System$Gateway$Ioc$IMicroIoc$Register$4<TClass>(TClass: TypeArg<TClass>, factory: Func$1<TClass>, key: string): void;
                System$Gateway$Ioc$IMicroIoc$Register$5<TClass>(TClass: TypeArg<TClass>, factory: Func$1<TClass>, key: string, createInstanceImmediately: boolean): void;
                System$Gateway$Ioc$IMicroIoc$Reset(): void;
                System$Gateway$Ioc$IMicroIoc$Unregister<TClass>(TClass: TypeArg<TClass>): void;
                System$Gateway$Ioc$IMicroIoc$Unregister$1<TClass>(TClass: TypeArg<TClass>, instance: TClass): void;
                System$Gateway$Ioc$IMicroIoc$Unregister$2<TClass>(TClass: TypeArg<TClass>, key: string): void;
            }
            const IMicroIoc: TypeFunction;

            // System.Gateway.Ioc.MicroIoc
            export interface MicroIoc extends Object, IMicroIoc, IServiceLocator, IServiceProvider {
                ContainsCreated<TClass>(TClass: TypeArg<TClass>): boolean;
                ContainsCreated$1<TClass>(TClass: TypeArg<TClass>, key: string): boolean;
                IsRegistered<T>(T: TypeArg<T>): boolean;
                IsRegistered$1<T>(T: TypeArg<T>, key: string): boolean;
                Register$6<TInterface, TClass>(TInterface: TypeArg<TInterface>, TClass: TypeArg<TClass>): void;
                Register$8<TInterface, TClass>(TInterface: TypeArg<TInterface>, TClass: TypeArg<TClass>, createInstanceImmediately: boolean): void;
                Register$7<TInterface, TClass>(TInterface: TypeArg<TInterface>, TClass: TypeArg<TClass>, factory: Func$1<TClass>): void;
                Register$9<TInterface, TClass>(TInterface: TypeArg<TInterface>, TClass: TypeArg<TClass>, factory: Func$1<TClass>, createInstanceImmediately: boolean): void;
                Register<TClass>(TClass: TypeArg<TClass>): void;
                Register$2<TClass>(TClass: TypeArg<TClass>, createInstanceImmediately: boolean): void;
                Register$1<TClass>(TClass: TypeArg<TClass>, factory: Func$1<TClass>): void;
                Register$3<TClass>(TClass: TypeArg<TClass>, factory: Func$1<TClass>, createInstanceImmediately: boolean): void;
                Register$4<TClass>(TClass: TypeArg<TClass>, factory: Func$1<TClass>, key: string): void;
                Register$5<TClass>(TClass: TypeArg<TClass>, factory: Func$1<TClass>, key: string, createInstanceImmediately: boolean): void;
                Reset(): void;
                Unregister<TClass>(TClass: TypeArg<TClass>): void;
                Unregister$1<TClass>(TClass: TypeArg<TClass>, instance: TClass): void;
                Unregister$2<TClass>(TClass: TypeArg<TClass>, key: string): void;
                GetAllCreatedInstances(serviceType: Type): Collections.Generic.IEnumerable$1<any>;
                GetAllCreatedInstances$1<TService>(TService: TypeArg<TService>): Collections.Generic.IEnumerable$1<TService>;
                GetService(serviceType: Type): any;
                NewInstance(serviceType: Type): any;
                NewInstance$1(serviceType: Type, key: string): any;
                NewInstance$2<TService>(TService: TypeArg<TService>): TService;
                NewInstance$3<TService>(TService: TypeArg<TService>, key: string): TService;
                GetInstance(serviceType: Type): any;
                GetInstance$1(serviceType: Type, key: string): any;
                GetInstance$2<TService>(TService: TypeArg<TService>): TService;
                GetInstance$3<TService>(TService: TypeArg<TService>, key: string): TService;
                GetAllInstances(serviceType: Type): Collections.Generic.IEnumerable$1<any>;
                GetAllInstances$1<TService>(TService: TypeArg<TService>): Collections.Generic.IEnumerable$1<TService>;
            }
            export interface MicroIocTypeFunc extends TypeFunction {
                (): MicroIocTypeFunc;
                prototype: MicroIoc;
                EmptyArguments: any[];
                new (): MicroIoc;
                ctor: { new (): MicroIoc; };
                get_Default(): MicroIoc;
                ActivateInstance<TClass>(TClass: TypeArg<TClass>, constructor: Reflection.ConstructorInfo, get_service: Func$2<Type, any>): TClass;
            }
            const MicroIoc: MicroIocTypeFunc;

            // System.Gateway.Ioc.IServiceLocator
            export interface IServiceLocator extends IServiceProvider {
                System$Gateway$Ioc$IServiceLocator$NewInstance(serviceType: Type): any;
                System$Gateway$Ioc$IServiceLocator$NewInstance$1(serviceType: Type, key: string): any;
                System$Gateway$Ioc$IServiceLocator$NewInstance$2<TService>(TService: TypeArg<TService>): TService;
                System$Gateway$Ioc$IServiceLocator$NewInstance$3<TService>(TService: TypeArg<TService>, key: string): TService;
                System$Gateway$Ioc$IServiceLocator$GetInstance(serviceType: Type): any;
                System$Gateway$Ioc$IServiceLocator$GetInstance$1(serviceType: Type, key: string): any;
                System$Gateway$Ioc$IServiceLocator$GetInstance$2<TService>(TService: TypeArg<TService>): TService;
                System$Gateway$Ioc$IServiceLocator$GetInstance$3<TService>(TService: TypeArg<TService>, key: string): TService;
                System$Gateway$Ioc$IServiceLocator$GetAllInstances(serviceType: Type): Collections.Generic.IEnumerable$1<any>;
                System$Gateway$Ioc$IServiceLocator$GetAllInstances$1<TService>(TService: TypeArg<TService>): Collections.Generic.IEnumerable$1<TService>;
            }
            const IServiceLocator: TypeFunction;

            // System.Gateway.Ioc.ServiceLocator
            export interface ServiceLocatorTypeFunc extends TypeFunction {
                (): ServiceLocatorTypeFunc;
                get_Current(): IServiceLocator;
                SetLocatorProvider(newProvider: ServiceLocatorProvider): void;
            }
            const ServiceLocator: ServiceLocatorTypeFunc;

            // System.Gateway.Ioc.ServiceLocatorProvider
            export interface ServiceLocatorProvider extends MulticastDelegate { (): IServiceLocator; }

            // System.Gateway.Ioc.ActivationException
            export interface ActivationException extends Exception {
            }
            export interface ActivationExceptionTypeFunc extends TypeFunction {
                (): ActivationExceptionTypeFunc;
                prototype: ActivationException;
                new (): ActivationException;
                ctor: { new (): ActivationException; };
                ctor$1: { new (message: string): ActivationException; };
                ctor$2: { new (message: string, innerException: Exception): ActivationException; };
            }
            const ActivationException: ActivationExceptionTypeFunc;

            // System.Gateway.Ioc.ServiceLocatorImplBase
            export interface ServiceLocatorImplBase extends Object, IServiceLocator, IServiceProvider {
                NewInstance(serviceType: Type): any;
                NewInstance$1(serviceType: Type, key: string): any;
                NewInstance$2<TService>(TService: TypeArg<TService>): TService;
                NewInstance$3<TService>(TService: TypeArg<TService>, key: string): TService;
                GetService(serviceType: Type): any;
                GetInstance(serviceType: Type): any;
                GetInstance$1(serviceType: Type, key: string): any;
                GetInstance$2<TService>(TService: TypeArg<TService>): TService;
                GetInstance$3<TService>(TService: TypeArg<TService>, key: string): TService;
                GetAllInstances(serviceType: Type): Collections.Generic.IEnumerable$1<any>;
                GetAllInstances$1<TService>(TService: TypeArg<TService>): Collections.Generic.IEnumerable$1<TService>;
            }
            export interface ServiceLocatorImplBaseTypeFunc extends TypeFunction {
                (): ServiceLocatorImplBaseTypeFunc;
                prototype: ServiceLocatorImplBase;
            }
            const ServiceLocatorImplBase: ServiceLocatorImplBaseTypeFunc;
        }
        module Mvvm {
            // System.Gateway.Mvvm.IData
            export interface IData {
            }

            // System.Gateway.Mvvm.Model
            export interface Model extends Collections.ObjectModel.ObservableObject, ComponentModel.INotifyPropertyChanged, IDisposable {
                Dispose(): void;
            }
            export interface ModelTypeFunc extends TypeFunction {
                (): ModelTypeFunc;
                prototype: Model;
            }
            const Model: ModelTypeFunc;

            // System.Gateway.Mvvm.ViewModel
            export interface ViewModel extends Model, ComponentModel.INotifyPropertyChanged, IDisposable {
                get_IsBusy(): boolean;
            }
            export interface ViewModelTypeFunc extends TypeFunction {
                (): ViewModelTypeFunc;
                prototype: ViewModel;
            }
            const ViewModel: ViewModelTypeFunc;

            // System.Gateway.Mvvm.RelayCommand
            export interface RelayCommand extends Object, Windows.Input.ICommand {
                add_CanExecuteChanged(value: EventHandler): void;
                remove_CanExecuteChanged(value: EventHandler): void;
                RaiseCanExecuteChanged(): void;
                CanExecute(parameter: any): boolean;
                Execute(parameter: any): void;
            }
            export interface RelayCommandTypeFunc extends TypeFunction {
                (): RelayCommandTypeFunc;
                prototype: RelayCommand;
                ctor$1: { new (execute: Action, canExecute: Func$1<boolean>): RelayCommand; };
                new (execute: Action): RelayCommand;
                ctor: { new (execute: Action): RelayCommand; };
            }
            const RelayCommand: RelayCommandTypeFunc;

            // System.Gateway.Mvvm.RelayCommand<T>
            export interface RelayCommand$1<T> extends Object, Windows.Input.ICommand {
                add_CanExecuteChanged(value: EventHandler): void;
                remove_CanExecuteChanged(value: EventHandler): void;
                RaiseCanExecuteChanged(): void;
                CanExecute(parameter: any): boolean;
                Execute(parameter: any): void;
            }
            export interface RelayCommand$1TypeFunc<T> extends TypeFunction {
                (): RelayCommand$1TypeFunc<T>;
                prototype: RelayCommand$1<T>;
                new (execute: Action$1<T>): RelayCommand$1<T>;
                ctor: { new (execute: Action$1<T>): RelayCommand$1<T>; };
                ctor$1: { new (execute: Action$1<T>, canExecute: Predicate$1<T>): RelayCommand$1<T>; };
            }
            export function RelayCommand$1<T>(T: TypeArg<T>): RelayCommand$1TypeFunc<T>;
        }
    }
    module Xml {
        // System.Xml.XmlDocument
        export interface XmlDocument extends Object {
            get_document(): Document;
        }
        export interface XmlDocumentTypeFunc extends TypeFunction {
            (): XmlDocumentTypeFunc;
            prototype: XmlDocument;
            new (doc: Document): XmlDocument;
            ctor: { new (doc: Document): XmlDocument; };
        }
        const XmlDocument: XmlDocumentTypeFunc;
    }
    module ComponentModel {
        // System.ComponentModel.INotifyPropertyChanged
        export interface INotifyPropertyChanged {
            System$ComponentModel$INotifyPropertyChanged$add_PropertyChanged(value: PropertyChangedEventHandler): void;
            System$ComponentModel$INotifyPropertyChanged$remove_PropertyChanged(value: PropertyChangedEventHandler): void;
        }
        const INotifyPropertyChanged: TypeFunction;

        // System.ComponentModel.PropertyChangedEventArgs
        export interface PropertyChangedEventArgs extends EventArgs {
            get_PropertyName(): string;
        }
        export interface PropertyChangedEventArgsTypeFunc extends TypeFunction {
            (): PropertyChangedEventArgsTypeFunc;
            prototype: PropertyChangedEventArgs;
            new (propertyName: string): PropertyChangedEventArgs;
            ctor: { new (propertyName: string): PropertyChangedEventArgs; };
        }
        const PropertyChangedEventArgs: PropertyChangedEventArgsTypeFunc;

        // System.ComponentModel.PropertyChangedEventHandler
        export interface PropertyChangedEventHandler extends MulticastDelegate { (sender: any, e: PropertyChangedEventArgs): void; }

        // System.ComponentModel.ChangeListener
        export interface ChangeListener extends Object, INotifyPropertyChanged, IDisposable {
            add_PropertyChanged(value: PropertyChangedEventHandler): void;
            remove_PropertyChanged(value: PropertyChangedEventHandler): void;
            Dispose(): void;
        }
        export interface ChangeListenerTypeFunc extends TypeFunction {
            (): ChangeListenerTypeFunc;
            prototype: ChangeListener;
            Create(value: INotifyPropertyChanged): ChangeListener;
            Create$1(value: INotifyPropertyChanged, propertyName: string): ChangeListener;
        }
        const ChangeListener: ChangeListenerTypeFunc;

        // System.ComponentModel.ChildChangeListener
        export interface ChildChangeListener extends ChangeListener, INotifyPropertyChanged, IDisposable {
        }
        export interface ChildChangeListenerTypeFunc extends TypeFunction {
            (): ChildChangeListenerTypeFunc;
            prototype: ChildChangeListener;
            new (instance: INotifyPropertyChanged): ChildChangeListener;
            ctor: { new (instance: INotifyPropertyChanged): ChildChangeListener; };
            ctor$1: { new (instance: INotifyPropertyChanged, propertyName: string): ChildChangeListener; };
        }
        const ChildChangeListener: ChildChangeListenerTypeFunc;

        // System.ComponentModel.CollectionChangeListener
        export interface CollectionChangeListener extends ChangeListener, INotifyPropertyChanged, IDisposable {
        }
        export interface CollectionChangeListenerTypeFunc extends TypeFunction {
            (): CollectionChangeListenerTypeFunc;
            prototype: CollectionChangeListener;
            new (collection: Collections.Specialized.INotifyCollectionChanged, propertyName: string): CollectionChangeListener;
            ctor: { new (collection: Collections.Specialized.INotifyCollectionChanged, propertyName: string): CollectionChangeListener; };
        }
        const CollectionChangeListener: CollectionChangeListenerTypeFunc;
    }
    module Collections {
        module Generic {
            // System.Collections.Generic.DictionaryList<TKey, TValue>
            export interface DictionaryList$2<TKey, TValue> extends Dictionary$2<TKey, List$1<TValue>>, IDictionary$2<TKey, List$1<TValue>>, ICollection$1<KeyValuePair$2<TKey, List$1<TValue>>>, IDictionary, ICollection, IReadOnlyDictionary$2<TKey, List$1<TValue>>, IReadOnlyCollection$1<KeyValuePair$2<TKey, List$1<TValue>>>, IEnumerable$1<KeyValuePair$2<TKey, List$1<TValue>>>, IEnumerable {
                Add$2(key: TKey, value: TValue): void;
            }
            export interface DictionaryList$2TypeFunc<TKey, TValue> extends TypeFunction {
                (): DictionaryList$2TypeFunc<TKey, TValue>;
                prototype: DictionaryList$2<TKey, TValue>;
                new (): DictionaryList$2<TKey, TValue>;
                ctor: { new (): DictionaryList$2<TKey, TValue>; };
            }
            export function DictionaryList$2<TKey, TValue>(TKey: TypeArg<TKey>, TValue: TypeArg<TValue>): DictionaryList$2TypeFunc<TKey, TValue>;
        }
        module Specialized {
            // System.Collections.Specialized.INotifyCollectionChanged
            export interface INotifyCollectionChanged {
                System$Collections$Specialized$INotifyCollectionChanged$add_CollectionChanged(value: NotifyCollectionChangedEventHandler): void;
                System$Collections$Specialized$INotifyCollectionChanged$remove_CollectionChanged(value: NotifyCollectionChangedEventHandler): void;
            }
            const INotifyCollectionChanged: TypeFunction;

            // System.Collections.Specialized.NotifyCollectionChangedAction
            export enum NotifyCollectionChangedAction {
                Add = 0,
                Remove = 1,
                Replace = 2,
                Move = 3,
                Reset = 4
            }

            // System.Collections.Specialized.NotifyCollectionChangedEventArgs
            export interface NotifyCollectionChangedEventArgs extends EventArgs {
                get_Action(): NotifyCollectionChangedAction;
                get_NewItems(): Generic.IList$1<any>;
                get_OldItems(): Generic.IList$1<any>;
                get_NewStartingIndex(): int;
                get_OldStartingIndex(): int;
            }
            export interface NotifyCollectionChangedEventArgsTypeFunc extends TypeFunction {
                (): NotifyCollectionChangedEventArgsTypeFunc;
                prototype: NotifyCollectionChangedEventArgs;
                new (action: NotifyCollectionChangedAction): NotifyCollectionChangedEventArgs;
                ctor: { new (action: NotifyCollectionChangedAction): NotifyCollectionChangedEventArgs; };
                ctor$1: { new (action: NotifyCollectionChangedAction, changedItem: any, index: int): NotifyCollectionChangedEventArgs; };
                ctor$2: { new (action: NotifyCollectionChangedAction, newItem: any, oldItem: any, index: int): NotifyCollectionChangedEventArgs; };
            }
            const NotifyCollectionChangedEventArgs: NotifyCollectionChangedEventArgsTypeFunc;

            // System.Collections.Specialized.NotifyCollectionChangedEventHandler
            export interface NotifyCollectionChangedEventHandler extends MulticastDelegate { (sender: any, e: NotifyCollectionChangedEventArgs): void; }
        }
        module ObjectModel {
            // System.Collections.ObjectModel.Collection<T>
            export interface Collection$1<T> extends Object, Generic.IList$1<T>, Generic.ICollection$1<T>, Generic.IEnumerable$1<T>, IList, ICollection, IEnumerable {
                Add(item: T): void;
                Clear(): void;
                Contains(item: T): boolean;
                CopyTo(array: T[], index: int): void;
                GetEnumerator(): Generic.IEnumerator$1<T>;
                IndexOf(item: T): int;
                Insert(index: int, item: T): void;
                Remove(item: T): boolean;
                RemoveAt(index: int): void;
                get_Count(): int;
                get_Item(index: int): T;
                set_Item(index: int, value: T): void;
            }
            export interface Collection$1TypeFunc<T> extends TypeFunction {
                (): Collection$1TypeFunc<T>;
                prototype: Collection$1<T>;
                new (): Collection$1<T>;
                ctor: { new (): Collection$1<T>; };
                ctor$1: { new (list: Generic.IList$1<T>): Collection$1<T>; };
            }
            export function Collection$1<T>(T: TypeArg<T>): Collection$1TypeFunc<T>;

            // System.Collections.ObjectModel.ObservableObject
            export interface ObservableObject extends Object, ComponentModel.INotifyPropertyChanged {
                add_PropertyChanged(value: ComponentModel.PropertyChangedEventHandler): void;
                remove_PropertyChanged(value: ComponentModel.PropertyChangedEventHandler): void;
            }
            export interface ObservableObjectTypeFunc extends TypeFunction {
                (): ObservableObjectTypeFunc;
                prototype: ObservableObject;
            }
            const ObservableObject: ObservableObjectTypeFunc;

            // System.Collections.ObjectModel.ObservableArray<T>
            export interface ObservableArray$1<T> extends ObservableCollection$1<T>, Generic.IList$1<T>, Generic.ICollection$1<T>, Generic.IEnumerable$1<T>, IList, ICollection, IEnumerable, Specialized.INotifyCollectionChanged, ComponentModel.INotifyPropertyChanged {
                array: T[];
            }
            export interface ObservableArray$1TypeFunc<T> extends TypeFunction {
                (): ObservableArray$1TypeFunc<T>;
                prototype: ObservableArray$1<T>;
                new (): ObservableArray$1<T>;
                ctor: { new (): ObservableArray$1<T>; };
                ctor$2: { new (list: Generic.List$1<T>): ObservableArray$1<T>; };
                ctor$1: { new (collection: Generic.IEnumerable$1<T>): ObservableArray$1<T>; };
            }
            export function ObservableArray$1<T>(T: TypeArg<T>): ObservableArray$1TypeFunc<T>;

            // System.Collections.ObjectModel.ObservableCollection<T>
            export interface ObservableCollection$1<T> extends Collection$1<T>, Generic.IList$1<T>, Generic.ICollection$1<T>, Generic.IEnumerable$1<T>, IList, ICollection, IEnumerable, Specialized.INotifyCollectionChanged, ComponentModel.INotifyPropertyChanged {
                Move(oldIndex: int, newIndex: int): void;
                add_CollectionChanged(value: Specialized.NotifyCollectionChangedEventHandler): void;
                remove_CollectionChanged(value: Specialized.NotifyCollectionChangedEventHandler): void;
            }
            export interface ObservableCollection$1TypeFunc<T> extends TypeFunction {
                (): ObservableCollection$1TypeFunc<T>;
                prototype: ObservableCollection$1<T>;
                new (): ObservableCollection$1<T>;
                ctor: { new (): ObservableCollection$1<T>; };
                ctor$2: { new (list: Generic.List$1<T>): ObservableCollection$1<T>; };
                ctor$1: { new (collection: Generic.IEnumerable$1<T>): ObservableCollection$1<T>; };
            }
            export function ObservableCollection$1<T>(T: TypeArg<T>): ObservableCollection$1TypeFunc<T>;
        }
    }
    module Windows {
        module Input {
            // System.Windows.Input.ICommand
            export interface ICommand {
                System$Windows$Input$ICommand$add_CanExecuteChanged(value: EventHandler): void;
                System$Windows$Input$ICommand$remove_CanExecuteChanged(value: EventHandler): void;
                System$Windows$Input$ICommand$CanExecute(parameter: any): boolean;
                System$Windows$Input$ICommand$Execute(parameter: any): void;
            }
            const ICommand: TypeFunction;
        }
    }
    module Data {
        // System.Data.DataSet
        export interface DataSet extends Object {
        }
        export interface DataSetTypeFunc extends TypeFunction {
            (): DataSetTypeFunc;
            prototype: DataSet;
            new (): DataSet;
            ctor: { new (): DataSet; };
        }
        const DataSet: DataSetTypeFunc;

        // System.Data.DataTable
        export interface DataTable extends Object {
        }
        export interface DataTableTypeFunc extends TypeFunction {
            (): DataTableTypeFunc;
            prototype: DataTable;
            new (): DataTable;
            ctor: { new (): DataTable; };
        }
        const DataTable: DataTableTypeFunc;
    }
    module Root {
        // System.Root.browser
        export interface browserTypeFunc extends TypeFunction {
            (): browserTypeFunc;
            supportsAjax(): boolean;
            supportsImport(): boolean;
            supportsTemplate(): boolean;
            supportsRouting(): boolean;
            supportsDocuments(): boolean;
            supportsDatabases(): boolean;
            supportsWebGL(): boolean;
            supportsBridge(): boolean;
            supportsMacBridge(): boolean;
            supportsWindowsBridge(): boolean;
            supportsAndroidBridge(): boolean;
            supportsIosBridge(): boolean;
        }
    }
    module Template {
        // System.Template.tools
        export interface toolsTypeFunc extends TypeFunction {
            (): toolsTypeFunc;
            registerHelper(name: string, helper: Delegate): void;
            unregisterHelper(name: string): void;
            registerPartial(name: string, template: string): void;
            unregisterPartial(name: string): void;
        }
    }
    module UIManager {
        // System.UIManager.AlertDelegate
        export interface AlertDelegate extends MulticastDelegate { (message: string, type?: string, caption?: string, callback?: Delegate): void; }

        // System.UIManager.MarkupDeleagte
        export interface MarkupDeleagte extends MulticastDelegate { (element: HTMLElement, html: string): void; }

        // System.UIManager.SplashDelegate
        export interface SplashDelegate extends MulticastDelegate { (container?: HTMLElement, clear?: boolean): void; }
    }
}
declare module DuoCode {
    module Dom {
        // DuoCode.Dom.HtmlEventListener
        export interface HtmlEventListener extends System.Object, EventListener {
            get_handler(): System.Action$1<Event>;
            set_handler(value: System.Action$1<Event>): void;
            handleEvent(event: Event): void;
        }
        export interface HtmlEventListenerTypeFunc extends TypeFunction {
            (): HtmlEventListenerTypeFunc;
            prototype: HtmlEventListener;
            new (): HtmlEventListener;
            ctor: { new (): HtmlEventListener; };
            ctor$1: { new (handler: System.Action$1<Event>): HtmlEventListener; };
        }
        const HtmlEventListener: HtmlEventListenerTypeFunc;

        // DuoCode.Dom.HtmlDuoExtensions
        export interface HtmlDuoExtensionsTypeFunc extends TypeFunction {
            (): HtmlDuoExtensionsTypeFunc;
            insertAfter(source: HTMLElement, newElement: HTMLElement, targetElement: HTMLElement): void;
            iterateNodes(el: HTMLElement, elementVisitor: System.Action$1<Node>): void;
        }
        const HtmlDuoExtensions: HtmlDuoExtensionsTypeFunc;

        // DuoCode.Dom.WindowExtensions
        export interface WindowExtensionsTypeFunc extends TypeFunction {
            (): WindowExtensionsTypeFunc;
            eval(window: Window, code: string): any;
            btoa(window: Window, str: string): string;
            atob(window: Window, str: string): string;
        }
        const WindowExtensions: WindowExtensionsTypeFunc;
    }
    module Runtime {
        // DuoCode.Runtime.Color
        export interface Color extends System.ValueType {
            R: double;
            G: double;
            B: double;
        }
        export interface ColorTypeFunc extends TypeFunction {
            (): ColorTypeFunc;
            prototype: Color;
            Violet: Color;
            White: Color;
            Grey: Color;
            Black: Color;
            Background: Color;
            DefaultColor: Color;
            ctor$1: { new (r: double, g: double, b: double): Color; };
            ctor$2: { new (r: int, g: int, b: int): Color; };
            new (): Color;
            ctor: { new (): Color; };
            op_Multiply$1(k: double, v: Color): Color;
            op_Addition(v1: Color, v2: Color): Color;
            op_Multiply(v1: Color, v2: Color): Color;
        }
        const Color: ColorTypeFunc;

        // DuoCode.Runtime.Method
        export enum Method {
            OPTIONS = 0,
            GET = 1,
            HEAD = 2,
            POST = 3,
            PUT = 4,
            PATCH = 5,
            DELETE = 6,
            TRACE = 7,
            CONNECT = 8
        }

        // DuoCode.Runtime.DateTimeExtensions
        export interface DateTimeExtensionsTypeFunc extends TypeFunction {
            (): DateTimeExtensionsTypeFunc;
            ToLogString(dateTime: Date): string;
            ToMonthShortName(dateTime: Date): string;
        }
        const DateTimeExtensions: DateTimeExtensionsTypeFunc;

        // DuoCode.Runtime.JsArrayExtensions
        export interface JsArrayExtensionsTypeFunc extends TypeFunction {
            (): JsArrayExtensionsTypeFunc;
            ToList<T>(T: TypeArg<T>, source: Array<T>): System.Collections.Generic.List$1<T>;
            Count<T>(T: TypeArg<T>, source: System.Collections.Generic.List$1<T>): int;
        }
        const JsArrayExtensions: JsArrayExtensionsTypeFunc;
    }
}
declare module Newtonsoft {
    module Json {
        // Newtonsoft.Json.JsonObjectAttribute
        export interface JsonObjectAttribute extends System.Attribute {
        }
        export interface JsonObjectAttributeTypeFunc extends TypeFunction {
            (): JsonObjectAttributeTypeFunc;
            prototype: JsonObjectAttribute;
            new (): JsonObjectAttribute;
            ctor: { new (): JsonObjectAttribute; };
            ctor$1: { new (serviceName: string): JsonObjectAttribute; };
        }
        const JsonObjectAttribute: JsonObjectAttributeTypeFunc;

        // Newtonsoft.Json.JsonIgnoreAttribute
        export interface JsonIgnoreAttribute extends System.Attribute {
        }
        export interface JsonIgnoreAttributeTypeFunc extends TypeFunction {
            (): JsonIgnoreAttributeTypeFunc;
            prototype: JsonIgnoreAttribute;
            new (): JsonIgnoreAttribute;
            ctor: { new (): JsonIgnoreAttribute; };
            ctor$1: { new (serviceName: string): JsonIgnoreAttribute; };
        }
        const JsonIgnoreAttribute: JsonIgnoreAttributeTypeFunc;
        module Linq {
            // Newtonsoft.Json.Linq.JObject
            export interface JObject extends Object {
            }
            export interface JObjectTypeFunc extends TypeFunction {
                (): JObjectTypeFunc;
                prototype: JObject;
                new (): JObject;
                ctor: { new (): JObject; };
            }
            const JObject: JObjectTypeFunc;
        }
    }
}
